@model DevTutorialWebApp.Models.SubTopic
@{
    ViewData["Title"] = $"{Model.Title} - {ViewBag.StepTitle}";
}

@section Styles {
    <!-- Prism.js CSS for syntax highlighting -->
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.css" rel="stylesheet" />
    
    <style>
        /* Prism.js integration styles */
        pre[class*="language-"] {
            margin: 1.5rem 0;
            border-radius: 8px;
            font-size: 0.95em;
        }
        
        .code-example-section {
            position: relative;
            margin: 1.5rem 0;
        }
        
        /* Override toolbar styling to match our theme */
        div.code-toolbar > .toolbar {
            opacity: 1;
        }
        
        div.code-toolbar > .toolbar > .toolbar-item > button {
            background: rgba(79, 209, 197, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        
        div.code-toolbar > .toolbar > .toolbar-item > button:hover {
            background: rgba(79, 209, 197, 1);
        }
        
        /* Ensure proper spacing with line numbers */
        pre[class*="language-"].line-numbers {
            padding-left: 3.8em;
        }
        
        .line-numbers .line-numbers-rows {
            border-right: 1px solid #3c3c3c;
        }
    </style>
}


<div class="container mt-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="@ViewBag.ControllerName" asp-action="@ViewBag.ActionName">@ViewBag.RoadmapTitle</a></li>
            <li class="breadcrumb-item"><a asp-controller="@ViewBag.ControllerName" asp-action="TopicDetail" asp-route-roadmapId="@ViewBag.RoadmapId" asp-route-stepId="@ViewBag.StepId">@ViewBag.StepTitle</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
        </ol>
    </nav>

    <div class="hero-section">
        <h1 class="hero-title">@Model.Title</h1>
        <p class="hero-subtitle">@Model.Description</p>
    </div>

    <div class="row mt-5">
        <div class="col-lg-8">
            <!-- Main Content -->
            <div class="roadmap-card">
                <h2 class="text-gradient mb-4">Overview</h2>
                <div class="content-section">
                    <p>@Model.Content</p>
                </div>

                @if (Model.KeyPoints != null && Model.KeyPoints.Any())
                {
                    <h3 class="text-gradient mt-4 mb-3">Key Learning Points</h3>
                    <div class="key-points">
                        <p class="mb-3 text-muted">Click on any topic below to jump to the detailed explanation:</p>
                        @foreach (var point in Model.KeyPoints)
                        {
                            var anchorId = point.ToLower().Replace(" ", "-").Replace("&", "and");
                            <div class="key-point-item clickable" data-target="@anchorId">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                <span>@point</span>
                                <i class="bi bi-arrow-down-short ms-auto text-primary"></i>
                            </div>
                        }
                    </div>
                }

                <!-- Detailed Sections for C# Fundamentals -->
                @if (Model.Id == 1101)
                {
                    <!-- Variables and Data Types Section -->
                    <div id="variables-and-data-types" class="detail-section">
                        <h3 class="section-title text-gradient">Variables and Data Types</h3>
                        <div class="section-content">
                            <p>Variables are containers that store data values. C# is a strongly-typed language, meaning every variable must have a specific data type.</p>
                            
                            <h5 class="subsection-title">Primitive Data Types:</h5>
                            <div class="data-types-grid">
                                <div class="data-type-card">
                                    <strong>int</strong> - 32-bit signed integer<br>
                                    <code>int age = 25;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>double</strong> - 64-bit floating point<br>
                                    <code>double price = 99.99;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>string</strong> - Text data<br>
                                    <code>string name = "John";</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>bool</strong> - True or false<br>
                                    <code>bool isActive = true;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>char</strong> - Single character<br>
                                    <code>char grade = 'A';</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>decimal</strong> - High precision decimal<br>
                                    <code>decimal amount = 1000.50m;</code>
                                </div>
                            </div>
                            
                            <div class="code-example-section mt-3">
                                <pre class="line-numbers"><code class="language-csharp">// Variable Declaration Examples
int studentCount = 30;
double averageScore = 85.7;
string courseName = "C# Programming";
bool isOnline = true;
char letterGrade = 'B';
decimal tuitionFee = 2500.00m;

// Type inference with 'var'
var message = "Hello, World!"; // Inferred as string
var number = 42; // Inferred as int</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Control Flow Section -->
                    <div id="control-flow-statements" class="detail-section">
                        <h3 class="section-title text-gradient">Control Flow Statements</h3>
                        <div class="section-content">
                            <p>Control flow statements determine the order in which code executes. They allow you to make decisions and repeat operations.</p>
                            
                            <h5 class="subsection-title">Conditional Statements:</h5>
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">// If-else statements
int score = 85;
if (score &gt;= 90)
{
    Console.WriteLine("Excellent!");
}
else if (score &gt;= 80)
{
    Console.WriteLine("Good job!");
}
else if (score &gt;= 70)
{
    Console.WriteLine("Satisfactory");
}
else
{
    Console.WriteLine("Needs improvement");
}

// Switch expression (modern C#)
string grade = score switch
{
    &gt;= 90 =&gt; "A",
    &gt;= 80 =&gt; "B",
    &gt;= 70 =&gt; "C",
    &gt;= 60 =&gt; "D",
    _ =&gt; "F"
};</code></pre>
                            </div>
                            
                            <h5 class="subsection-title">Loops:</h5>
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">// For loop
for (int i = 1; i &lt;= 5; i++)
{
    Console.WriteLine($"Count: {i}");
}

// While loop
int counter = 0;
while (counter &lt; 3)
{
    Console.WriteLine($"Counter: {counter}");
    counter++;
}

// Foreach loop
string[] names = {"Alice", "Bob", "Charlie"};
foreach (string name in names)
{
    Console.WriteLine($"Hello, {name}!");
}</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Methods Section -->
                    <div id="methods-and-parameters" class="detail-section">
                        <h3 class="section-title text-gradient">Methods and Parameters</h3>
                        <div class="section-content">
                            <p>Methods are blocks of code that perform specific tasks. They help organize code and enable reusability.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">// Basic method structure
public static int Add(int a, int b)
{
    return a + b;
}

// Method with optional parameters
public static void Greet(string name, string greeting = "Hello")
{
    Console.WriteLine($"{greeting}, {name}!");
}

// Method overloading
public static double Add(double a, double b)
{
    return a + b;
}

public static string Add(string a, string b)
{
    return a + b;
}

// Method with params keyword
public static int Sum(params int[] numbers)
{
    return numbers.Sum();
}

// Usage examples
int result1 = Add(5, 3); // Returns 8
double result2 = Add(5.5, 3.2); // Returns 8.7
string result3 = Add("Hello, ", "World!"); // Returns "Hello, World!"
int total = Sum(1, 2, 3, 4, 5); // Returns 15

Greet("Alice"); // "Hello, Alice!"
Greet("Bob", "Hi"); // "Hi, Bob!"</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- OOP Section -->
                    <div id="object-oriented-programming" class="detail-section">
                        <h3 class="section-title text-gradient">Object-Oriented Programming</h3>
                        <div class="section-content">
                            <p>C# is built around object-oriented programming (OOP) principles. Classes are blueprints for creating objects.</p>
                            
                            <div class="oop-concepts">
                                <div class="concept-card">
                                    <strong>Encapsulation</strong> - Bundling data and methods together
                                </div>
                                <div class="concept-card">
                                    <strong>Inheritance</strong> - Creating new classes based on existing ones
                                </div>
                                <div class="concept-card">
                                    <strong>Polymorphism</strong> - Same interface, different implementations
                                </div>
                                <div class="concept-card">
                                    <strong>Abstraction</strong> - Hiding complex implementation details
                                </div>
                            </div>
                            
                            <div class="code-example-section mt-3">
                                <pre class="line-numbers"><code class="language-csharp">// Class definition
public class Student
{
    // Fields (private data)
    private string _name;
    private int _age;
    private List<int> _grades;
    
    // Properties (public interface)
    public string Name 
    { 
        get =&gt; _name; 
        set =&gt; _name = value?.Trim() ?? throw new ArgumentNullException(); 
    }
    
    public int Age 
    { 
        get =&gt; _age; 
        set =&gt; _age = value &gt;= 0 ? value : throw new ArgumentException("Age cannot be negative"); 
    }
    
    public double GPA =&gt; _grades.Any() ? _grades.Average() : 0.0;
    
    // Constructor
    public Student(string name, int age)
    {
        Name = name;
        Age = age;
        _grades = new List<int>();
    }
    
    // Methods
    public void AddGrade(int grade)
    {
        if (grade &gt;= 0 &amp;&amp; grade &lt;= 100)
            _grades.Add(grade);
        else
            throw new ArgumentOutOfRangeException("Grade must be between 0 and 100");
    }
    
    public override string ToString()
    {
        return $"Student: {Name}, Age: {Age}, GPA: {GPA:F2}";
    }
}

// Usage
Student student = new Student("Alice Johnson", 20);
student.AddGrade(85);
student.AddGrade(92);
student.AddGrade(78);
Console.WriteLine(student); // Student: Alice Johnson, Age: 20, GPA: 85.00</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Exception Handling Section -->
                    <div id="exception-handling" class="detail-section">
                        <h3 class="section-title text-gradient">Exception Handling</h3>
                        <div class="section-content">
                            <p>Exception handling allows your program to gracefully handle errors and unexpected situations.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">// Basic try-catch
try
{
    int[] numbers = {1, 2, 3};
    Console.WriteLine(numbers[10]); // This will throw an exception
}
catch (IndexOutOfRangeException ex)
{
    Console.WriteLine($"Array index error: {ex.Message}");
}
catch (Exception ex)
{
    Console.WriteLine($"General error: {ex.Message}");
}
finally
{
    Console.WriteLine("This always executes");
}

// Custom exceptions
public class InvalidAgeException : Exception
{
    public InvalidAgeException(int age) 
        : base($"Age {age} is not valid. Age must be between 0 and 120.") 
    {
    }
}

// Using custom exception
public static void ValidateAge(int age)
{
    if (age &lt; 0 || age &gt; 120)
        throw new InvalidAgeException(age);
}

// Exception handling with specific catches
try
{
    string input = Console.ReadLine();
    int age = int.Parse(input);
    ValidateAge(age);
    Console.WriteLine($"Valid age: {age}");
}
catch (FormatException)
{
    Console.WriteLine("Please enter a valid number");
}
catch (InvalidAgeException ex)
{
    Console.WriteLine(ex.Message);
}
catch (Exception ex)
{
    Console.WriteLine($"Unexpected error: {ex.Message}");
}</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Collections Section -->
                    <div id="collections-and-arrays" class="detail-section">
                        <h3 class="section-title text-gradient">Collections and Arrays</h3>
                        <div class="section-content">
                            <p>Collections store multiple values and provide methods to manipulate them efficiently.</p>
                            
                            <div class="collections-grid">
                                <div class="collection-card">
                                    <strong>Array</strong> - Fixed-size collection<br>
                                    <code>int[] numbers = {1, 2, 3};</code>
                                </div>
                                <div class="collection-card">
                                    <strong>List&lt;T&gt;</strong> - Dynamic array<br>
                                    <code>List&lt;string&gt; names = new();</code>
                                </div>
                                <div class="collection-card">
                                    <strong>Dictionary&lt;K,V&gt;</strong> - Key-value pairs<br>
                                    <code>Dictionary&lt;string, int&gt; ages;</code>
                                </div>
                                <div class="collection-card">
                                    <strong>HashSet&lt;T&gt;</strong> - Unique values<br>
                                    <code>HashSet&lt;string&gt; unique;</code>
                                </div>
                            </div>
                            
                            <div class="code-example-section mt-3">
                                <pre class="line-numbers"><code class="language-csharp">// Arrays
int[] scores = new int[5] {85, 92, 78, 96, 88};
string[] names = {"Alice", "Bob", "Charlie", "Diana"};

// Lists
List<string> cities = new List<string>();
cities.Add("New York");
cities.Add("London");
cities.AddRange(new[] {"Tokyo", "Paris"});

// Dictionary
Dictionary<string, int> population = new Dictionary<string, int>
{
    ["New York"] = 8_500_000,
    ["London"] = 9_000_000,
    ["Tokyo"] = 14_000_000
};

// HashSet
HashSet<string> uniqueNames = new HashSet<string> {"Alice", "Bob", "Alice"};
// Only contains "Alice" and "Bob" (no duplicates)

// Common operations
Console.WriteLine($"Cities count: {cities.Count}");
Console.WriteLine($"Contains London: {cities.Contains("London")}");
Console.WriteLine($"Tokyo population: {population["Tokyo"]}");

// Iteration
foreach (var city in cities)
{
    Console.WriteLine(city);
}

foreach (var kvp in population)
{
    Console.WriteLine($"{kvp.Key}: {kvp.Value:N0}");
}</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- String Manipulation Section -->
                    <div id="string-manipulation" class="detail-section">
                        <h3 class="section-title text-gradient">String Manipulation</h3>
                        <div class="section-content">
                            <p>Strings are immutable sequences of characters. C# provides extensive methods for string manipulation.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">string text = "  Hello, World!  ";
string name = "Alice";
int age = 25;
double salary = 75000.50;

// Basic string methods
string upper = text.ToUpper(); // "  HELLO, WORLD!  "
string lower = text.ToLower(); // "  hello, world!  "
string trimmed = text.Trim(); // "Hello, World!"
string substring = text.Substring(2, 5); // "Hello"
bool contains = text.Contains("World"); // true
int index = text.IndexOf("World"); // 9

// String interpolation
string greeting = $"Hello, {name}! You are {age} years old.";
string formatted = $"Salary: {salary:C}"; // "Salary: $75,000.50"

// String.Format (alternative)
string formatted2 = string.Format("Name: {0}, Age: {1}", name, age);

// StringBuilder for multiple concatenations
StringBuilder sb = new StringBuilder();
sb.Append("Hello");
sb.Append(", ");
sb.Append("World!");
string result = sb.ToString(); // "Hello, World!"

// String operations
string[] words = "apple,banana,cherry".Split(',');
string joined = string.Join(" | ", words); // "apple | banana | cherry"

// String validation
bool isEmpty = string.IsNullOrEmpty(text);
bool isWhitespace = string.IsNullOrWhiteSpace(text);

// Regular expressions
using System.Text.RegularExpressions;
string email = "user@example.com";
bool isValidEmail = Regex.IsMatch(email, @@"^[^@@\s]+@@[^@@\s]+\.[^@@\s]+$");</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- LINQ Section -->
                    <div id="linq-basics" class="detail-section">
                        <h3 class="section-title text-gradient">LINQ Basics</h3>
                        <div class="section-content">
                            <p>Language Integrated Query (LINQ) provides a uniform way to query data from different sources.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-csharp">// Sample data
List<int> numbers = new List<int> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
List<string> names = new List<string> {"Alice", "Bob", "Charlie", "Diana", "Eve"};

// Filtering
var evenNumbers = numbers.Where(n =&gt; n % 2 == 0).ToList();
// Result: {2, 4, 6, 8, 10}

var longNames = names.Where(name =&gt; name.Length &gt; 4).ToList();
// Result: {"Alice", "Charlie", "Diana"}

// Projection (Select)
var squares = numbers.Select(n =&gt; n * n).ToList();
// Result: {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}

var upperNames = names.Select(name =&gt; name.ToUpper()).ToList();
// Result: {"ALICE", "BOB", "CHARLIE", "DIANA", "EVE"}

// Aggregation
int sum = numbers.Sum(); // 55
double average = numbers.Average(); // 5.5
int max = numbers.Max(); // 10
int min = numbers.Min(); // 1
int count = numbers.Count(); // 10
bool any = numbers.Any(n =&gt; n &gt; 5); // true
bool all = numbers.All(n =&gt; n &gt; 0); // true

// Ordering
var ascending = names.OrderBy(name =&gt; name).ToList();
var descending = names.OrderByDescending(name =&gt; name).ToList();
var byLength = names.OrderBy(name =&gt; name.Length).ThenBy(name =&gt; name).ToList();

// Complex queries
var result = numbers
    .Where(n =&gt; n &gt; 3)
    .Select(n =&gt; new { Number = n, Square = n * n })
    .OrderByDescending(x =&gt; x.Square)
    .Take(3)
    .ToList();

// Query syntax (alternative)
var queryResult = from n in numbers
                  where n % 2 == 0
                  orderby n descending
                  select n * n;

// Working with objects
List<Person> people = new List<Person>
{
    new Person("Alice", 25),
    new Person("Bob", 30),
    new Person("Charlie", 22)
};

var adults = people.Where(p =&gt; p.Age &gt;= 25).Select(p =&gt; p.Name).ToList();
var avgAge = people.Average(p =&gt; p.Age);</code></pre>
                            </div>
                        </div>
                    </div>
                }

                <!-- Detailed Sections for JavaScript Essentials -->
                @if (Model.Id == 1102)
                {
                    <!-- Variables and Data Types Section -->
                    <div id="variables-and-data-types" class="detail-section">
                        <h3 class="section-title text-gradient">Variables and Data Types</h3>
                        <div class="section-content">
                            <p>JavaScript is a dynamically typed language where variables can hold values of any type without declaring a type. Understanding data types is crucial because JavaScript behaves differently based on the type of data you're working with.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Variables and data types form the foundation of any program. Knowing how JavaScript handles different types prevents bugs and helps you write more predictable code, especially when dealing with type coercion and comparisons.</p>
                            
                            <h5 class="subsection-title">Primitive Data Types:</h5>
                            <div class="data-types-grid">
                                <div class="data-type-card">
                                    <strong>string</strong> - Text data<br>
                                    <code>let name = "JavaScript";</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>number</strong> - Integers and floats<br>
                                    <code>let age = 25; let pi = 3.14;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>boolean</strong> - True or false<br>
                                    <code>let isActive = true;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>undefined</strong> - Variable declared but not assigned<br>
                                    <code>let data; // undefined</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>null</strong> - Intentional absence of value<br>
                                    <code>let result = null;</code>
                                </div>
                                <div class="data-type-card">
                                    <strong>symbol</strong> - Unique identifier<br>
                                    <code>let sym = Symbol("id");</code>
                                </div>
                            </div>
                            
                            <div class="code-example-section mt-3">
                                <pre class="line-numbers"><code class="language-javascript">// Variable declarations
let message = "Hello, World!";     // Can be reassigned
const PI = 3.14159;                // Cannot be reassigned
var oldStyle = "legacy";           // Function-scoped (avoid using)

// Dynamic typing
let dynamicVar = 42;               // Number
dynamicVar = "Now I'm a string";   // String
dynamicVar = true;                  // Boolean

// Type checking
console.log(typeof message);        // "string"
console.log(typeof PI);            // "number"
console.log(typeof dynamicVar);    // "boolean"

// Type coercion examples
let num = "5" + 3;                 // "53" (string concatenation)
let subtraction = "5" - 3;         // 2 (numeric subtraction)
let comparison = "5" == 5;         // true (loose equality)
let strictComparison = "5" === 5;  // false (strict equality)

// Truthy and Falsy values
// Falsy: false, 0, "", null, undefined, NaN
// Everything else is truthy
if ("") {
    console.log("Won't execute");
} else {
    console.log("Empty string is falsy");
}

// BigInt for large numbers
const bigNumber = 9007199254740991n;
const anotherBig = BigInt("9007199254740992");

// Template literals
const name = "Alice";
const age = 25;
const greeting = `Hello, ${name}! You are ${age} years old.`;
console.log(greeting);</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Functions and Scope Section -->
                    <div id="functions-and-scope" class="detail-section">
                        <h3 class="section-title text-gradient">Functions and Scope</h3>
                        <div class="section-content">
                            <p>Functions are reusable blocks of code that perform specific tasks. JavaScript offers multiple ways to create functions, each with different behaviors regarding scope and the <code>this</code> keyword.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Understanding functions and scope is essential for writing modular, maintainable code. Scope determines where variables can be accessed, preventing naming conflicts and enabling data encapsulation.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Function declaration (hoisted)
function greet(name) {
    return `Hello, ${name}!`;
}

// Function expression
const add = function(a, b) {
    return a + b;
};

// Arrow functions (ES6+)
const multiply = (a, b) =&gt; a * b;
const square = x =&gt; x * x;  // Single parameter, no parentheses needed
const sayHi = () =&gt; console.log("Hi!");  // No parameters

// Function with default parameters
function createUser(name, age = 18, role = "user") {
    return { name, age, role };
}

// Rest parameters
function sum(...numbers) {
    return numbers.reduce((total, num) =&gt; total + num, 0);
}

console.log(sum(1, 2, 3, 4));  // 10

// Scope demonstration
let globalVar = "I'm global";

function demonstrateScope() {
    let functionScoped = "I'm function-scoped";
    
    if (true) {
        let blockScoped = "I'm block-scoped";
        var functionScopedVar = "I'm function-scoped (var)";
        console.log(blockScoped);  // Works
    }
    
    // console.log(blockScoped);  // Error: blockScoped is not defined
    console.log(functionScopedVar);  // Works (var ignores block scope)
}

// Closures
function createCounter() {
    let count = 0;
    
    return {
        increment: () =&gt; ++count,
        decrement: () =&gt; --count,
        getCount: () =&gt; count
    };
}

const counter = createCounter();
console.log(counter.increment());  // 1
console.log(counter.increment());  // 2
console.log(counter.getCount());   // 2

// Higher-order functions
function applyOperation(arr, operation) {
    return arr.map(operation);
}

const numbers = [1, 2, 3, 4, 5];
const doubled = applyOperation(numbers, x =&gt; x * 2);
console.log(doubled);  // [2, 4, 6, 8, 10]

// IIFE (Immediately Invoked Function Expression)
(function() {
    console.log("This runs immediately!");
})();

// Function as first-class citizens
const operations = {
    add: (a, b) =&gt; a + b,
    subtract: (a, b) =&gt; a - b,
    multiply: (a, b) =&gt; a * b
};

console.log(operations.add(5, 3));  // 8</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Objects and Prototypes Section -->
                    <div id="objects-and-prototypes" class="detail-section">
                        <h3 class="section-title text-gradient">Objects and Prototypes</h3>
                        <div class="section-content">
                            <p>Objects are collections of key-value pairs and the building blocks of JavaScript. Understanding prototypes is crucial for grasping how JavaScript implements inheritance.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Objects allow you to structure data and create complex applications. Prototypes enable code reuse and form the basis of JavaScript's object-oriented programming model.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Object literal
const person = {
    name: "Alice",
    age: 30,
    greet() {
        return `Hi, I'm ${this.name}`;
    }
};

// Accessing properties
console.log(person.name);       // Dot notation
console.log(person["age"]);     // Bracket notation

// Adding/modifying properties
person.email = "alice@example.com";
person.age = 31;

// Object methods
const user = {
    firstName: "John",
    lastName: "Doe",
    get fullName() {
        return `${this.firstName} ${this.lastName}`;
    },
    set fullName(value) {
        [this.firstName, this.lastName] = value.split(" ");
    }
};

console.log(user.fullName);  // "John Doe"
user.fullName = "Jane Smith";
console.log(user.firstName); // "Jane"

// Object destructuring
const { name, age } = person;
console.log(name, age);  // "Alice" 31

// Object spread operator
const extendedPerson = {
    ...person,
    city: "New York",
    age: 32  // Overrides the spread value
};

// Constructor functions
function Car(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
}

Car.prototype.getInfo = function() {
    return `${this.year} ${this.make} ${this.model}`;
};

const myCar = new Car("Toyota", "Corolla", 2022);
console.log(myCar.getInfo());  // "2022 Toyota Corolla"

// ES6 Classes (syntactic sugar over prototypes)
class Animal {
    constructor(name, species) {
        this.name = name;
        this.species = species;
    }
    
    speak() {
        return `${this.name} makes a sound`;
    }
}

class Dog extends Animal {
    constructor(name, breed) {
        super(name, "Canine");
        this.breed = breed;
    }
    
    speak() {
        return `${this.name} barks!`;
    }
    
    wagTail() {
        return `${this.name} wags tail happily`;
    }
}

const myDog = new Dog("Buddy", "Golden Retriever");
console.log(myDog.speak());     // "Buddy barks!"
console.log(myDog.wagTail());   // "Buddy wags tail happily"

// Object.create() for prototypal inheritance
const animalPrototype = {
    speak() {
        return `${this.name} makes a sound`;
    }
};

const cat = Object.create(animalPrototype);
cat.name = "Whiskers";
console.log(cat.speak());  // "Whiskers makes a sound"

// Object utility methods
const obj = { a: 1, b: 2, c: 3 };
console.log(Object.keys(obj));     // ["a", "b", "c"]
console.log(Object.values(obj));   // [1, 2, 3]
console.log(Object.entries(obj));  // [["a", 1], ["b", 2], ["c", 3]]

// Freezing objects
const frozen = Object.freeze({ x: 10 });
frozen.x = 20;  // Silently fails (or throws in strict mode)
console.log(frozen.x);  // Still 10</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Arrays and Iteration Section -->
                    <div id="arrays-and-iteration" class="detail-section">
                        <h3 class="section-title text-gradient">Arrays and Iteration</h3>
                        <div class="section-content">
                            <p>Arrays are ordered collections of values. JavaScript provides powerful array methods that make data manipulation elegant and functional.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Arrays are fundamental for handling lists of data. Mastering array methods enables you to write cleaner, more functional code and avoid manual loops for common operations.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Array creation
const fruits = ["apple", "banana", "orange"];
const numbers = [1, 2, 3, 4, 5];
const mixed = [1, "two", true, { name: "object" }, [1, 2, 3]];

// Array methods - Adding/Removing
fruits.push("grape");         // Add to end
fruits.unshift("mango");      // Add to beginning
const lastFruit = fruits.pop();        // Remove from end
const firstFruit = fruits.shift();      // Remove from beginning

// Array methods - Transformation
const upperFruits = fruits.map(fruit =&gt; fruit.toUpperCase());
console.log(upperFruits);  // ["BANANA", "ORANGE", "GRAPE"]

// Filtering
const longFruits = fruits.filter(fruit =&gt; fruit.length &gt; 5);
console.log(longFruits);  // ["banana", "orange"]

// Finding elements
const foundFruit = fruits.find(fruit =&gt; fruit.startsWith("o"));
const foundIndex = fruits.findIndex(fruit =&gt; fruit.startsWith("o"));

// Reducing arrays
const sum = numbers.reduce((acc, num) =&gt; acc + num, 0);
const product = numbers.reduce((acc, num) =&gt; acc * num, 1);

// Chaining methods
const result = numbers
    .filter(num =&gt; num % 2 === 0)    // Get even numbers
    .map(num =&gt; num * 2)              // Double them
    .reduce((acc, num) =&gt; acc + num, 0);  // Sum them
console.log(result);  // 12 (2*2 + 4*2)

// Array destructuring
const [first, second, ...rest] = numbers;
console.log(first, second, rest);  // 1, 2, [3, 4, 5]

// Spread operator with arrays
const moreFruits = [...fruits, "kiwi", "peach"];
const combined = [...fruits, ...["pear", "plum"]];

// Array methods for testing
const hasExpensive = numbers.some(num =&gt; num &gt; 4);     // true
const allPositive = numbers.every(num =&gt; num &gt; 0);     // true

// Sorting arrays
const names = ["Charlie", "Alice", "Bob"];
names.sort();  // Modifies original: ["Alice", "Bob", "Charlie"]

// Sort with compare function
const scores = [10, 5, 20, 15];
scores.sort((a, b) =&gt; a - b);  // Ascending: [5, 10, 15, 20]

// Array.from() to create arrays
const arrayFromString = Array.from("Hello");  // ["H", "e", "l", "l", "o"]
const range = Array.from({ length: 5 }, (_, i) =&gt; i + 1);  // [1, 2, 3, 4, 5]

// Flattening arrays
const nested = [1, [2, 3], [4, [5, 6]]];
const flat = nested.flat();        // [1, 2, 3, 4, [5, 6]]
const deepFlat = nested.flat(2);   // [1, 2, 3, 4, 5, 6]

// FlatMap (map + flat)
const sentences = ["Hello world", "How are you"];
const words = sentences.flatMap(sentence =&gt; sentence.split(" "));
console.log(words);  // ["Hello", "world", "How", "are", "you"]

// Iteration methods
fruits.forEach((fruit, index) =&gt; {
    console.log(`${index}: ${fruit}`);
});

// For...of loop (ES6+)
for (const fruit of fruits) {
    console.log(fruit);
}

// For...in loop (for object properties, not recommended for arrays)
for (const index in fruits) {
    console.log(`${index}: ${fruits[index]}`);
}</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Asynchronous Programming Section -->
                    <div id="asynchronous-programming" class="detail-section">
                        <h3 class="section-title text-gradient">Asynchronous Programming</h3>
                        <div class="section-content">
                            <p>JavaScript is single-threaded but uses asynchronous programming to handle time-consuming operations without blocking the main thread.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Asynchronous programming is essential for modern web development. It enables responsive user interfaces, API calls, file operations, and other I/O operations without freezing the application.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Callbacks (traditional approach)
function fetchData(callback) {
    setTimeout(() =&gt; {
        callback("Data loaded");
    }, 1000);
}

fetchData((data) =&gt; {
    console.log(data);  // "Data loaded" after 1 second
});

// Promises
function fetchUserData(userId) {
    return new Promise((resolve, reject) =&gt; {
        setTimeout(() =&gt; {
            if (userId &gt; 0) {
                resolve({ id: userId, name: "John Doe" });
            } else {
                reject(new Error("Invalid user ID"));
            }
        }, 1000);
    });
}

// Using promises
fetchUserData(1)
    .then(user =&gt; {
        console.log(user);
        return user.id * 2;
    })
    .then(doubledId =&gt; {
        console.log(`Doubled ID: ${doubledId}`);
    })
    .catch(error =&gt; {
        console.error("Error:", error.message);
    })
    .finally(() =&gt; {
        console.log("Operation complete");
    });

// Promise.all - wait for multiple promises
const promise1 = Promise.resolve(1);
const promise2 = Promise.resolve(2);
const promise3 = Promise.resolve(3);

Promise.all([promise1, promise2, promise3])
    .then(values =&gt; {
        console.log(values);  // [1, 2, 3]
    });

// Promise.race - first to resolve/reject wins
Promise.race([
    new Promise(resolve =&gt; setTimeout(() =&gt; resolve("Fast"), 100)),
    new Promise(resolve =&gt; setTimeout(() =&gt; resolve("Slow"), 200))
])
.then(result =&gt; console.log(result));  // "Fast"

// Async/Await (ES2017) - cleaner syntax for promises
async function getUserPosts(userId) {
    try {
        const user = await fetchUserData(userId);
        console.log(`Fetching posts for ${user.name}`);
        
        // Simulate fetching posts
        const posts = await new Promise(resolve =&gt; 
            setTimeout(() =&gt; resolve(["Post 1", "Post 2"]), 500)
        );
        
        return { user, posts };
    } catch (error) {
        console.error("Error fetching data:", error);
        throw error;
    }
}

// Using async function
getUserPosts(1)
    .then(data =&gt; console.log(data))
    .catch(error =&gt; console.error(error));

// Async iteration
async function* generateNumbers() {
    for (let i = 1; i &lt;= 3; i++) {
        await new Promise(resolve =&gt; setTimeout(resolve, 100));
        yield i;
    }
}

// Consuming async iterator
(async () =&gt; {
    for await (const num of generateNumbers()) {
        console.log(num);  // 1, 2, 3 (with delays)
    }
})();

// Real-world example: Fetching API data
async function fetchGitHubUser(username) {
    try {
        const response = await fetch(`https://api.github.com/users/${username}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const userData = await response.json();
        return userData;
    } catch (error) {
        console.error("Failed to fetch user:", error);
        throw error;
    }
}

// Parallel async operations
async function fetchMultipleUsers(usernames) {
    const promises = usernames.map(username =&gt; fetchGitHubUser(username));
    const users = await Promise.all(promises);
    return users;
}

// Event loop demonstration
console.log("1. Synchronous");

setTimeout(() =&gt; {
    console.log("3. Timeout (macrotask)");
}, 0);

Promise.resolve().then(() =&gt; {
    console.log("2. Promise (microtask)");
});

console.log("1. Synchronous");</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- DOM Manipulation Section -->
                    <div id="dom-manipulation" class="detail-section">
                        <h3 class="section-title text-gradient">DOM Manipulation</h3>
                        <div class="section-content">
                            <p>The Document Object Model (DOM) represents the structure of HTML documents. JavaScript can dynamically access and modify the DOM to create interactive web pages.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>DOM manipulation is the bridge between JavaScript and web pages. It enables dynamic content updates, user interaction handling, and the creation of modern single-page applications.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Selecting elements
const elementById = document.getElementById("myId");
const elementsByClass = document.getElementsByClassName("myClass");
const elementsByTag = document.getElementsByTagName("div");

// Modern selectors (preferred)
const singleElement = document.querySelector(".my-class");
const allElements = document.querySelectorAll(".my-class");

// Creating elements
const newDiv = document.createElement("div");
newDiv.textContent = "Hello, World!";
newDiv.className = "greeting";
newDiv.id = "greeting-div";

// Adding attributes
newDiv.setAttribute("data-custom", "value");
newDiv.style.color = "blue";
newDiv.style.fontSize = "20px";

// Appending to DOM
document.body.appendChild(newDiv);

// Inserting elements
const container = document.querySelector(".container");
const paragraph = document.createElement("p");
paragraph.textContent = "New paragraph";

container.insertBefore(paragraph, container.firstChild);
container.append(paragraph);  // At the end
container.prepend(paragraph); // At the beginning

// Modifying content
const heading = document.querySelector("h1");
heading.textContent = "New Heading";  // Safe, escapes HTML
heading.innerHTML = "<span>New</span> Heading";  // Parses HTML

// Event handling
const button = document.querySelector("#myButton");

button.addEventListener("click", function(event) {
    console.log("Button clicked!");
    console.log(event.target);
});

// Event delegation
document.addEventListener("click", function(event) {
    if (event.target.matches(".dynamic-button")) {
        console.log("Dynamic button clicked!");
    }
});

// Form handling
const form = document.querySelector("#myForm");

form.addEventListener("submit", function(event) {
    event.preventDefault();  // Prevent default submission
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    console.log(data);
});

// Class manipulation
const element = document.querySelector(".box");
element.classList.add("active");
element.classList.remove("inactive");
element.classList.toggle("hidden");

if (element.classList.contains("active")) {
    console.log("Element is active");
}

// Working with attributes
const link = document.querySelector("a");
const href = link.getAttribute("href");
link.setAttribute("target", "_blank");
link.removeAttribute("rel");

// Data attributes
const userCard = document.querySelector(".user-card");
userCard.dataset.userId = "123";  // Sets data-user-id="123"
console.log(userCard.dataset.userId);  // "123"

// Traversing the DOM
const parent = element.parentElement;
const children = element.children;  // HTML collection
const siblings = element.nextElementSibling;
const previousSibling = element.previousElementSibling;

// Finding specific elements
const closestContainer = element.closest(".container");
const hasChild = element.contains(childElement);

// Performance optimization with Fragment
const fragment = document.createDocumentFragment();
for (let i = 0; i &lt; 100; i++) {
    const li = document.createElement("li");
    li.textContent = `Item ${i}`;
    fragment.appendChild(li);
}
document.querySelector("ul").appendChild(fragment);

// Removing elements
element.remove();  // Modern way
// or
parent.removeChild(element);  // Traditional way

// Cloning elements
const clone = element.cloneNode(true);  // Deep clone
document.body.appendChild(clone);

// Observing DOM changes
const observer = new MutationObserver((mutations) =&gt; {
    mutations.forEach(mutation =&gt; {
        console.log("DOM changed:", mutation);
    });
});

observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true
});</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- ES6+ Features Section -->
                    <div id="es6and-features" class="detail-section">
                        <h3 class="section-title text-gradient">ES6+ Features</h3>
                        <div class="section-content">
                            <p>ECMAScript 6 (ES6) and later versions introduced significant improvements to JavaScript, making the language more powerful and developer-friendly.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Modern JavaScript features improve code readability, reduce boilerplate, and provide powerful new capabilities. These features are essential for contemporary JavaScript development.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Destructuring
const user = { name: "Alice", age: 30, city: "New York" };
const { name, age, city = "Unknown" } = user;

const colors = ["red", "green", "blue"];
const [primary, secondary, tertiary] = colors;

// Nested destructuring
const data = {
    user: {
        profile: {
            firstName: "John",
            lastName: "Doe"
        }
    }
};
const { user: { profile: { firstName } } } = data;

// Template literals
const multiline = `
    This is a
    multiline
    string
`;

const html = `
    <div class="user">
        <h2>${name}</h2>
        <p>Age: ${age}</p>
    </div>
`;

// Default parameters
function greet(name = "Guest", greeting = "Hello") {
    return `${greeting}, ${name}!`;
}

// Rest/Spread operators
function sum(...numbers) {
    return numbers.reduce((a, b) =&gt; a + b, 0);
}

const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];  // Spread in arrays

const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 };  // Spread in objects

// Enhanced object literals
const prop = "dynamic";
const enhancedObject = {
    // Shorthand property
    name,
    age,
    
    // Method shorthand
    greet() {
        return `Hello, I'm ${this.name}`;
    },
    
    // Computed property names
    [prop]: "value",
    [`${prop}Method`]() {
        return "Dynamic method";
    }
};

// Modules (ES6 Modules)
// math.js
export const add = (a, b) =&gt; a + b;
export const subtract = (a, b) =&gt; a - b;
export default function multiply(a, b) {
    return a * b;
}

// main.js
import multiply, { add, subtract } from './math.js';
import * as math from './math.js';

// Classes (covered in Objects section)

// Symbols
const sym1 = Symbol("id");
const sym2 = Symbol("id");
console.log(sym1 === sym2);  // false (always unique)

const user = {
    name: "Alice",
    [sym1]: "secretId123"
};

// Iterators and Generators
function* numberGenerator(max) {
    for (let i = 1; i &lt;= max; i++) {
        yield i;
    }
}

const gen = numberGenerator(3);
console.log(gen.next());  // { value: 1, done: false }
console.log(gen.next());  // { value: 2, done: false }
console.log(gen.next());  // { value: 3, done: false }
console.log(gen.next());  // { value: undefined, done: true }

// Map and Set
const map = new Map();
map.set("key1", "value1");
map.set("key2", "value2");
console.log(map.get("key1"));  // "value1"
console.log(map.size);  // 2

const set = new Set([1, 2, 3, 3, 4]);
console.log(set.size);  // 4 (no duplicates)
set.add(5);
set.has(3);  // true

// WeakMap and WeakSet (for memory-efficient operations)
const weakMap = new WeakMap();
let obj = { name: "temp" };
weakMap.set(obj, "metadata");

// Optional chaining (ES2020)
const deepObject = {
    user: {
        profile: {
            name: "Alice"
        }
    }
};

const safeName = deepObject.user?.profile?.name;  // "Alice"
const missing = deepObject.user?.settings?.theme;  // undefined (no error)

// Nullish coalescing (ES2020)
const value = null ?? "default";  // "default"
const zero = 0 ?? "default";      // 0 (not "default")

// Dynamic imports (ES2020)
async function loadModule() {
    const module = await import('./dynamic-module.js');
    module.doSomething();
}

// Private class fields (ES2022)
class User {
    #privateField = "secret";
    
    getSecret() {
        return this.#privateField;
    }
}

// Array methods (ES2019+)
const nested = [[1, 2], [3, [4, 5]]];
const flat = nested.flat(2);  // [1, 2, 3, 4, 5]

const entries = Object.entries({ a: 1, b: 2 });
const fromEntries = Object.fromEntries(entries);</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Error Handling Section -->
                    <div id="error-handling" class="detail-section">
                        <h3 class="section-title text-gradient">Error Handling</h3>
                        <div class="section-content">
                            <p>Proper error handling makes applications robust and user-friendly. JavaScript provides mechanisms to catch, handle, and recover from errors gracefully.</p>
                            
                            <h5 class="subsection-title">Why It's Important:</h5>
                            <p>Error handling prevents applications from crashing unexpectedly and provides meaningful feedback to users and developers. It's essential for debugging and maintaining production applications.</p>
                            
                            <div class="code-example-section">
                                <pre class="line-numbers"><code class="language-javascript">// Basic try-catch
try {
    // Code that might throw an error
    const result = riskyOperation();
    console.log(result);
} catch (error) {
    console.error("An error occurred:", error.message);
} finally {
    console.log("This always runs");
}

// Different error types
try {
    // ReferenceError
    console.log(undefinedVariable);
} catch (error) {
    if (error instanceof ReferenceError) {
        console.error("Variable not defined:", error.message);
    }
}

// Custom errors
class ValidationError extends Error {
    constructor(field, value) {
        super(`Invalid value for ${field}: ${value}`);
        this.name = "ValidationError";
        this.field = field;
        this.value = value;
    }
}

class NetworkError extends Error {
    constructor(status, statusText) {
        super(`Network error: ${status} ${statusText}`);
        this.name = "NetworkError";
        this.status = status;
    }
}

// Using custom errors
function validateAge(age) {
    if (typeof age !== "number") {
        throw new ValidationError("age", age);
    }
    if (age &lt; 0 || age &gt; 150) {
        throw new ValidationError("age", age);
    }
    return true;
}

try {
    validateAge("twenty");
} catch (error) {
    if (error instanceof ValidationError) {
        console.error(`Validation failed for ${error.field}`);
    }
}

// Error handling in async code
async function fetchData(url) {
    try {
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new NetworkError(response.status, response.statusText);
        }
        
        const data = await response.json();
        return data;
    } catch (error) {
        if (error instanceof NetworkError) {
            console.error("Network issue:", error.message);
            // Maybe retry or use cached data
        } else if (error instanceof SyntaxError) {
            console.error("Invalid JSON response");
        } else {
            console.error("Unexpected error:", error);
        }
        throw error;  // Re-throw if needed
    }
}

// Promise error handling
someAsyncOperation()
    .then(result =&gt; {
        return processResult(result);
    })
    .catch(error =&gt; {
        // Handle errors from any previous step
        console.error("Promise chain error:", error);
        return defaultValue;  // Provide fallback
    });

// Global error handling
window.addEventListener("error", (event) =&gt; {
    console.error("Global error:", event.error);
    // Log to error tracking service
});

window.addEventListener("unhandledrejection", (event) =&gt; {
    console.error("Unhandled promise rejection:", event.reason);
    // Prevent the default browser behavior
    event.preventDefault();
});

// Error recovery strategies
class DataService {
    constructor() {
        this.cache = new Map();
        this.retryCount = 3;
    }
    
    async fetchWithRetry(url, attempts = this.retryCount) {
        try {
            const response = await fetch(url);
            if (!response.ok) throw new NetworkError(response.status, response.statusText);
            
            const data = await response.json();
            this.cache.set(url, data);  // Cache successful response
            return data;
        } catch (error) {
            if (attempts &gt; 1 &amp;&amp; error instanceof NetworkError) {
                console.log(`Retrying... (${attempts - 1} attempts left)`);
                await new Promise(resolve =&gt; setTimeout(resolve, 1000));
                return this.fetchWithRetry(url, attempts - 1);
            }
            
            // Try to return cached data as fallback
            if (this.cache.has(url)) {
                console.warn("Using cached data due to error");
                return this.cache.get(url);
            }
            
            throw error;
        }
    }
}

// Debugging techniques
function debugFunction(value) {
    console.assert(value > 0, "Value must be positive");
    console.trace("Execution trace");
    
    try {
        // Intentionally cause error for demonstration
        if (value === 42) {
            debugger;  // Breakpoint for browser dev tools
        }
        
        return processValue(value);
    } catch (error) {
        console.error("Stack trace:", error.stack);
        throw error;
    }
}

// Error boundaries pattern (for frameworks)
class ErrorBoundary {
    constructor() {
        this.hasError = false;
        this.error = null;
    }
    
    execute(fn) {
        try {
            this.hasError = false;
            return fn();
        } catch (error) {
            this.hasError = true;
            this.error = error;
            this.logError(error);
            return this.fallback();
        }
    }
    
    logError(error) {
        console.error("Boundary caught:", error);
        // Send to error tracking service
    }
    
    fallback() {
        return { error: "Something went wrong", status: "error" };
    }
}</code></pre>
                            </div>
                        </div>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.CodeExample))
                {
                    <h3 class="text-gradient mt-4 mb-3">Complete Code Examples</h3>
                    <div class="code-section">
                        <pre class="line-numbers"><code class="language-csharp">@Model.CodeExample</code></pre>
                    </div>
                }
            </div>

            <!-- Practice Section -->
            <div class="roadmap-card mt-4">
                <h3 class="text-gradient mb-3">Practice & Apply</h3>
                <div class="practice-section">
                    <p>To master this concept, try the following:</p>
                    <ul class="practice-list">
                        <li>Build a small project implementing these concepts</li>
                        <li>Explain the concept to someone else</li>
                        <li>Find real-world examples in open source projects</li>
                        <li>Create your own examples and variations</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Resources Sidebar -->
            @if (Model.Resources != null && Model.Resources.Any())
            {
                <div class="roadmap-card sticky-top">
                    <h4 class="text-gradient mb-3">Resources</h4>
                    <div class="resources-sidebar">
                        @foreach (var resource in Model.Resources)
                        {
                            <a href="@resource.Url" class="resource-item d-flex align-items-center mb-3" target="_blank">
                                <i class="bi @GetResourceIcon(resource.Type) resource-icon me-3"></i>
                                <div class="flex-grow-1">
                                    <div class="resource-title">@resource.Title</div>
                                    <small class="text-secondary">@resource.Type</small>
                                </div>
                                <i class="bi bi-box-arrow-up-right ms-2"></i>
                            </a>
                        }
                    </div>
                </div>
            }

            <!-- Quick Navigation -->
            <div class="roadmap-card mt-4">
                <h4 class="text-gradient mb-3">Quick Actions</h4>
                <div class="d-grid gap-2">
                    <a asp-controller="@ViewBag.ControllerName" asp-action="TopicDetail" asp-route-roadmapId="@ViewBag.RoadmapId" asp-route-stepId="@ViewBag.StepId" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-left me-2"></i>Back to Topic
                    </a>
                    <button class="btn btn-outline-secondary" onclick="window.print()">
                        <i class="bi bi-printer me-2"></i>Print
                    </button>
                    <button class="btn btn-outline-secondary" onclick="shareSubTopic()">
                        <i class="bi bi-share me-2"></i>Share
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetResourceIcon(string type)
    {
        return type?.ToLower() switch
        {
            "video" => "bi-play-circle-fill",
            "article" => "bi-file-text-fill",
            "course" => "bi-mortarboard-fill",
            "website" => "bi-globe2",
            "book" => "bi-book-fill",
            "interactive" => "bi-controller",
            "documentation" => "bi-file-code-fill",
            _ => "bi-link-45deg"
        };
    }
}

@section Scripts {
    <!-- Prism.js Core -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    
    <!-- C# Language Support -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-csharp.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-aspnet.min.js"></script>
    
    <!-- JavaScript Language Support -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    
    <!-- Prism.js Plugins -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/normalize-whitespace/prism-normalize-whitespace.min.js"></script>
    
    <script>
        function shareSubTopic() {
            if (navigator.share) {
                navigator.share({
                    title: '@Model.Title',
                    text: '@Model.Description',
                    url: window.location.href
                }).catch(console.error);
            } else {
                // Fallback - copy to clipboard
                navigator.clipboard.writeText(window.location.href);
                alert('Link copied to clipboard!');
            }
        }

        
        // Make key points clickable
        document.addEventListener('DOMContentLoaded', function() {
            // Prism.js will automatically highlight code blocks
            // Manual highlight if needed
            Prism.highlightAll();
            
            const keyPointItems = document.querySelectorAll('.key-point-item.clickable');
            
            keyPointItems.forEach(item =&gt; {
                item.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);
                    
                    if (targetElement) {
                        targetElement.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                        
                        // Highlight the section briefly
                        targetElement.style.backgroundColor = 'rgba(79, 209, 197, 0.1)';
                        setTimeout(() =&gt; {
                            targetElement.style.backgroundColor = '';
                        }, 2000);
                    }
                });
            });
        });
    </script>
}

<style>
    .content-section {
        font-size: 1.1rem;
        line-height: 1.8;
        color: var(--text-primary);
    }

    .key-points {
        background-color: rgba(79, 209, 197, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
    }

    .key-point-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
        font-size: 1rem;
        padding: 0.75rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .key-point-item:last-child {
        margin-bottom: 0;
    }

    .key-point-item.clickable {
        cursor: pointer;
        border: 1px solid transparent;
    }

    .key-point-item.clickable:hover {
        background-color: rgba(79, 209, 197, 0.1);
        border-color: var(--primary-color);
        transform: translateX(8px);
    }

    /* Detailed sections styling */
    .detail-section {
        margin-top: 3rem;
        padding: 2rem 0;
        border-top: 1px solid rgba(79, 209, 197, 0.2);
    }

    .section-title {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        scroll-margin-top: 100px;
    }

    .section-content {
        font-size: 1.05rem;
        line-height: 1.7;
    }

    .subsection-title {
        color: var(--primary-color);
        font-weight: 600;
        margin: 1.5rem 0 1rem 0;
    }

    .data-types-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }

    .data-type-card, .collection-card {
        background-color: rgba(79, 209, 197, 0.05);
        border: 1px solid rgba(79, 209, 197, 0.2);
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
    }

    .data-type-card code, .collection-card code {
        display: block;
        margin-top: 0.5rem;
        color: var(--primary-color);
        font-weight: 500;
    }

    .oop-concepts {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }

    .concept-card {
        background: linear-gradient(135deg, rgba(79, 209, 197, 0.1), rgba(79, 172, 254, 0.1));
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        border: 1px solid rgba(79, 209, 197, 0.3);
    }

    .collections-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }

    .code-example-section {
        margin: 1.5rem 0;
    }

    .code-example-section pre.line-numbers {
        max-height: 500px;
        overflow-y: auto;
        position: relative;
    }

    /* Smooth scrolling for anchor links */
    html {
        scroll-behavior: smooth;
    }

    /* Code block styling - Prism.js handles syntax highlighting */
    .code-example-section pre.line-numbers {
        border: 1px solid #3c3c3c;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .code-section {
        margin-top: 1rem;
    }

    /* Remove the old conflicting style - handled by syntax highlighting CSS above */

    .practice-section {
        background-color: rgba(255, 193, 7, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        border-left: 3px solid #ffc107;
    }

    .practice-list {
        margin-bottom: 0;
        padding-left: 1.5rem;
    }

    .practice-list li {
        margin-bottom: 0.5rem;
    }

    .resource-item {
        background-color: rgba(79, 209, 197, 0.05);
        border-radius: 8px;
        padding: 0.75rem;
        text-decoration: none;
        color: var(--text-primary);
        transition: all 0.3s ease;
    }

    .resource-item:hover {
        background-color: rgba(79, 209, 197, 0.1);
        transform: translateX(4px);
        color: var(--primary-color);
    }

    .resource-icon {
        font-size: 1.5rem;
        color: var(--primary-color);
    }

    .resource-title {
        font-weight: 500;
        margin-bottom: 0.125rem;
    }

    .resources-sidebar {
        max-height: 400px;
        overflow-y: auto;
    }

    .sticky-top {
        top: 1rem;
    }

    @@media print {
        .breadcrumb, .quick-actions, .btn, .resource-item i {
            display: none !important;
        }
        
        .roadmap-card {
            break-inside: avoid;
        }
    }
</style>